require("dotenv").config();
const { App } = require("@slack/bolt");
const axios = require("axios");

// Initialize Bolt app
const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  socketMode: true,
  appToken: process.env.SLACK_APP_TOKEN,
  port: process.env.PORT || 3000,
});

const SUMMARY_API_URL = process.env.SUMMARY_API_URL || "http://localhost:8000";

// Handle /summary slash command
app.command("/summary", async ({ command, ack, respond }) => {
  await ack();

  const channelId = command.channel_id;

  try {
    // „ÉÅ„É£„É≥„Éç„É´Â±•Ê≠¥„ÇíÂèñÂæóÔºàÊúÄÊñ∞100‰ª∂Ôºâ
    const result = await app.client.conversations.history({
      channel: channelId,
      limit: 100,
    });

    if (!result.messages || result.messages.length === 0) {
      await respond({
        text: "„Åì„ÅÆ„ÉÅ„É£„É≥„Éç„É´„Å´„ÅØ„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ",
        response_type: "ephemeral",
      });
      return;
    }

    // bot„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈô§Â§ñ„Åó„ÄÅÂè§„ÅÑÈ†Ü„Å´Êï¥Âàó
    const userMessages = result.messages
      .filter((msg) => msg.subtype !== "bot_message")
      .map((msg) => msg.text)
      .reverse();

    if (userMessages.length === 0) {
      await respond({
        text: "„É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºàbotÊäïÁ®ø„ÇíÈô§Â§ñÊ∏à„ÅøÔºâ„ÄÇ",
        response_type: "ephemeral",
      });
      return;
    }

    // Âá¶ÁêÜ‰∏≠„É°„ÉÉ„Çª„Éº„Ç∏
    await respond({
      text: "üß† Ë¶ÅÁ¥Ñ„ÇíÁîüÊàê‰∏≠„Åß„Åô„ÄÇÂ∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ‚Ä¶",
      response_type: "in_channel",
    });

    // summary-api „Å∏Ë¶ÅÁ¥Ñ„É™„ÇØ„Ç®„Çπ„Éà
    const messages = userMessages.join("\n");

    const summaryResponse = await axios.post(
      `${SUMMARY_API_URL}/summary`,
      {
        text: messages,
        channel: channelId,
      },
      { timeout: Number(process.env.REQUEST_TIMEOUT_MS || 180000) } // 3ÂàÜ
    );

    const summary = summaryResponse.data.summary || "(Ë¶ÅÁ¥ÑÁµêÊûú„Å™„Åó)";

    // ÁèæÂú®ÊôÇÂàªÔºàÊó•Êú¨ÊôÇÈñìÔºâ
    const now = new Date().toLocaleString("ja-JP", {
      timeZone: "Asia/Tokyo",
      hour12: false,
    });

    // SlackÂá∫ÂäõÁî®„Å´Êï¥ÂΩ¢Ôºàsummary-api„ÅÆÁµêÊûú„ÇíÊ¥ª„Åã„Åó„Å¶„Ç∑„É≥„Éó„É´„Å´Ôºâ
    const message = `
${summary}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üïí ${now} „Å´ÁîüÊàê
`;

    // ÁµêÊûú„ÇíSlack„Å∏ÊäïÁ®ø
    await app.client.chat.postMessage({
      channel: channelId,
      text: message,
    });
  } catch (error) {
    console.error("‚ùå Error:", error);

    if (error.data && error.data.error === "not_in_channel") {
      await respond({
        text: "‚ùå „Ç®„É©„Éº: Bot„Åå„Åì„ÅÆ„ÉÅ„É£„É≥„Éç„É´„Å´ÂèÇÂä†„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ\n\n„ÉÅ„É£„É≥„Éç„É´„Åß `/invite @slack-summary` „Å®ÂÖ•Âäõ„Åó„Å¶ÊãõÂæÖ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        response_type: "ephemeral",
      });
      return;
    }

    const isTimeout =
      error.code === "ECONNABORTED" || /timeout/i.test(error.message || "");
    await respond({
      text: isTimeout
        ? "‚è± Ë¶ÅÁ¥ÑÂá¶ÁêÜ„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ„É°„ÉÉ„Çª„Éº„Ç∏Èáè„ÇíÊ∏õ„Çâ„Åô„Åã„ÄÅÂæå„Åß„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ"
        : `‚ö†Ô∏è „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`,
      response_type: "ephemeral",
    });
  }
});

// Start the app
(async () => {
  try {
    await app.start();
    console.log("‚ö°Ô∏è Bolt app is running!");
  } catch (error) {
    console.error("Failed to start app:", error);
    process.exit(1);
  }
})();
